---
import BasicLayout from '@/layouts/BasicLayout.astro';
---

<BasicLayout title="Package Merger | Adrian Palomo">
	<div class="parent">
		<div class="div1">
			<textarea id="input1" placeholder="Pega aquí el primer package.xml"
			></textarea>
		</div>
		<div class="div2">
			<textarea id="input2" placeholder="Pega aquí el segundo package.xml"
			></textarea>
		</div>
		<div class="div3">
			<button class="copy-btn" id="copy">Copiar</button>
			<textarea id="output" readonly placeholder="Resultado del merge"
			></textarea>
		</div>
	</div>
</BasicLayout>

<script type="module" is:inline>
	function parsePackage(xmlStr) {
		const parser = new DOMParser();
		return parser.parseFromString(xmlStr, 'application/xml');
	}
	function recogerTypes(doc) {
		const tipos = {};
		const list = doc.getElementsByTagName('types');
		for (let t of list) {
			const nameNode = t.getElementsByTagName('name')[0];
			if (!nameNode) continue;
			const name = nameNode.textContent;
			if (!tipos[name]) tipos[name] = [];
			for (let m of t.getElementsByTagName('members')) {
				const text = m.textContent;
				if (!tipos[name].includes(text)) tipos[name].push(text);
			}
		}
		return tipos;
	}
	function obtenerVersion(doc) {
		const v = doc.getElementsByTagName('version')[0];
		return v ? v.textContent : '';
	}
	function buildPackage(tipos, version) {
		let out = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\n';
		out += '<Package xmlns="http://soap.sforce.com/2006/04/metadata">\n';
		for (let name of Object.keys(tipos)) {
			out += '\t<types>\n';
			for (let mem of tipos[name]) {
				out += `\t\t<members>${mem}</members>\n`;
			}
			out += `\t\t<name>${name}</name>\n`;
			out += '\t</types>\n';
		}
		out += `\t<version>${version}</version>\n`;
		out += '</Package>';
		return out;
	}
	function merge() {
		const outArea = document.getElementById('output');
		outArea.classList.remove('error');
		const xml1 = document.getElementById('input1').value.trim();
		const xml2 = document.getElementById('input2').value.trim();
		try {
			const doc1 = parsePackage(xml1);
			const doc2 = parsePackage(xml2);
			const tipos1 = recogerTypes(doc1);
			const tipos2 = recogerTypes(doc2);
			for (let name in tipos2) {
				if (!tipos1[name]) {
					tipos1[name] = tipos2[name].slice();
				} else {
					for (let mem of tipos2[name]) {
						if (!tipos1[name].includes(mem)) tipos1[name].push(mem);
					}
				}
			}
			const version = obtenerVersion(doc1) || obtenerVersion(doc2) || '';
			outArea.value = buildPackage(tipos1, version);
		} catch (e) {
			outArea.value = e.message;
			outArea.classList.add('error');
		}
	}
	document.getElementById('input1').addEventListener('input', merge);
	document.getElementById('input2').addEventListener('input', merge);
	document.getElementById('copy').addEventListener('click', () => {
		const outArea = document.getElementById('output');
		outArea.select();
		document.execCommand('copy');
	});
	window.addEventListener('load', merge);
</script>

<style>
	html,
	body {
		margin: 0;
		padding: 0;
		height: 100%;
	}
	.parent {
		display: grid;
		grid-template-columns: repeat(2, 1fr);
		grid-template-rows: repeat(2, 1fr);
		gap: 8px;
		height: 100%;
		box-sizing: border-box;
		padding: 8px;
	}
	.div1 {
		grid-column-start: 1;
		grid-row-start: 1;
	}
	.div2 {
		grid-column-start: 1;
		grid-row-start: 2;
	}
	.div3 {
		position: relative;
		grid-column-start: 2;
		grid-row-start: 1;
		grid-row-end: span 2;
		display: flex;
		flex-direction: column;
	}
	textarea {
		width: 100%;
		height: 100%;
		resize: none;
		font-family: monospace;
		font-size: 14px;
		box-sizing: border-box;
		padding: 8px;
	}
	textarea.error {
		color: red;
	}
	.copy-btn {
		position: absolute;
		top: 10px;
		right: 15px;
		padding: 4px 8px;
		font-size: 12px;
		cursor: pointer;
		background: #eee;
		border: 1px solid #ccc;
		transition:
			background 0.2s,
			color 0.2s;
	}
	.copy-btn:hover {
		background: #ddd;
		color: #000;
	}
</style>
